/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interfaz.Paneles;

import Data.Infrastructure.DoctorsOffice;
import Data.Infrastructure.Hospital;
import Data.People.Doctor;
import Data.People.Patient;
import DataBase.GuardarHospital;
import DataBase.LoadDataBase;
import Exceptions.NotValidNumber;
import java.awt.CardLayout;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.WindowConstants;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 *
 * @author oscar
 */
public class MainWindow extends javax.swing.JFrame {

    /**
     * Variable keeping all the data from all the hospitals
     */
    private Hospital hospital;

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {

        this.hospital = null;

        initComponents();
        initSaveButtonsListeners();

        LoadDataBase DB = new LoadDataBase();
        this.hospital = DB.LoadHospital();

        this.setVisible(true);

        if (this.hospital == null) {

            this.setVisible(false);

            this.createNewHospitalForm.setVisible(true);

            this.Frame.setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
            this.Frame.addWindowListener(new WindowAdapter() {

                public void windowClosing(WindowEvent ev) {
                    int reply = JOptionPane.showConfirmDialog(null, "Â¿Seguro que quieres salir?", "Salir", JOptionPane.OK_CANCEL_OPTION);
                    if (reply == JOptionPane.OK_OPTION) {
                        System.exit(0);
                    }
                }
            });

            this.Frame.setSize(500, 600);
            this.Frame.setVisible(true);

            this.Frame.getContentPane().add(this.createNewHospitalForm);

        } else {

        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        inicioPanel = new javax.swing.JPanel();
        inicioPanel1 = new Interfaz.Paneles.InicioPanel();
        newHospital = new javax.swing.JPanel();
        createNewHospitalForm = new Interfaz.Paneles.CreateNewHospital();
        newOffice = new javax.swing.JPanel();
        createNewDoctorsOffice1 = new Interfaz.Paneles.CreateNewDoctorsOffice();
        newPatient = new javax.swing.JPanel();
        createNewPatient1 = new Interfaz.Paneles.CreateNewPatient();
        newDoctor = new javax.swing.JPanel();
        createNewDoctor2 = new Interfaz.Paneles.CreateNewDoctor();
        editPatient = new javax.swing.JPanel();
        editPatient1 = new Interfaz.Paneles.EditPatient();
        editOffice = new javax.swing.JPanel();
        reportOfficesPanel = new Interfaz.Paneles.ReportOffices();
        editDoctor = new javax.swing.JPanel();
        editDoctor1 = new Interfaz.Paneles.EditDoctor();
        removePatient = new javax.swing.JPanel();
        deletePatientOld1 = new Interfaz.Paneles.DeletePatientOld();
        removeOffice = new javax.swing.JPanel();
        removeDoctor = new javax.swing.JPanel();
        removeDoctorPanel = new Interfaz.Paneles.DeleteDoctor();
        aboutHospital = new javax.swing.JPanel();
        aboutHospital1 = new Interfaz.Paneles.aboutHospital();
        editHospital = new javax.swing.JPanel();
        editHospital1 = new Interfaz.Paneles.EditHospital();
        reportDoctor = new javax.swing.JPanel();
        reportDoctor1 = new Interfaz.Paneles.ReportDoctor();
        reportPatient = new javax.swing.JPanel();
        reportPatientPanel = new Interfaz.Paneles.ReportPatient();
        assignRoom = new javax.swing.JPanel();
        createNewRoomPanel = new Interfaz.Paneles.AsignarHabitacion();
        reportRoom = new javax.swing.JPanel();
        reportRoomPanel = new Interfaz.Paneles.ReportRoom();
        assignDoctorOffice = new javax.swing.JPanel();
        asignarConsultorio1 = new Interfaz.Paneles.AsignarConsultorio();
        newRoom = new javax.swing.JPanel();
        createNewRoom1 = new Interfaz.Paneles.CreateNewRoom();
        menuBar = new javax.swing.JMenuBar();
        save = new javax.swing.JMenu();
        menuHospital = new javax.swing.JMenu();
        menuEditHospital = new javax.swing.JMenuItem();
        menuAboutHospital = new javax.swing.JMenuItem();
        menuOffice = new javax.swing.JMenu();
        menuNewOffice = new javax.swing.JMenuItem();
        menuAssignOffice = new javax.swing.JMenuItem();
        menuSearchOffice = new javax.swing.JMenuItem();
        menuRoom = new javax.swing.JMenu();
        menuAddRoom = new javax.swing.JMenuItem();
        menuAssignRoom = new javax.swing.JMenuItem();
        menuSearchRoom = new javax.swing.JMenuItem();
        menuDoctor = new javax.swing.JMenu();
        menuNewDoctor = new javax.swing.JMenuItem();
        menuEditDoctor = new javax.swing.JMenuItem();
        menuRemoveDoctor = new javax.swing.JMenuItem();
        menuPatient = new javax.swing.JMenu();
        menuNewPatient = new javax.swing.JMenuItem();
        menuEditPatient = new javax.swing.JMenuItem();
        menuRemovePatient = new javax.swing.JMenuItem();
        menuReport = new javax.swing.JMenu();
        menuReportDoctor = new javax.swing.JMenuItem();
        menuReportPatient = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        mainPanel.setLayout(new java.awt.CardLayout());

        inicioPanel.setForeground(new java.awt.Color(204, 255, 204));

        javax.swing.GroupLayout inicioPanelLayout = new javax.swing.GroupLayout(inicioPanel);
        inicioPanel.setLayout(inicioPanelLayout);
        inicioPanelLayout.setHorizontalGroup(
            inicioPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, inicioPanelLayout.createSequentialGroup()
                .addContainerGap(72, Short.MAX_VALUE)
                .addComponent(inicioPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 774, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(69, 69, 69))
        );
        inicioPanelLayout.setVerticalGroup(
            inicioPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inicioPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(inicioPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 698, Short.MAX_VALUE)
                .addContainerGap())
        );

        mainPanel.add(inicioPanel, "inicioPanel");

        javax.swing.GroupLayout newHospitalLayout = new javax.swing.GroupLayout(newHospital);
        newHospital.setLayout(newHospitalLayout);
        newHospitalLayout.setHorizontalGroup(
            newHospitalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(newHospitalLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(createNewHospitalForm, javax.swing.GroupLayout.DEFAULT_SIZE, 889, Short.MAX_VALUE)
                .addContainerGap())
        );
        newHospitalLayout.setVerticalGroup(
            newHospitalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(newHospitalLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(createNewHospitalForm, javax.swing.GroupLayout.DEFAULT_SIZE, 698, Short.MAX_VALUE)
                .addContainerGap())
        );

        mainPanel.add(newHospital, "newHospital");

        javax.swing.GroupLayout newOfficeLayout = new javax.swing.GroupLayout(newOffice);
        newOffice.setLayout(newOfficeLayout);
        newOfficeLayout.setHorizontalGroup(
            newOfficeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(newOfficeLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(createNewDoctorsOffice1, javax.swing.GroupLayout.DEFAULT_SIZE, 889, Short.MAX_VALUE)
                .addContainerGap())
        );
        newOfficeLayout.setVerticalGroup(
            newOfficeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(newOfficeLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(createNewDoctorsOffice1, javax.swing.GroupLayout.DEFAULT_SIZE, 725, Short.MAX_VALUE)
                .addContainerGap())
        );

        mainPanel.add(newOffice, "newOffice");

        javax.swing.GroupLayout newPatientLayout = new javax.swing.GroupLayout(newPatient);
        newPatient.setLayout(newPatientLayout);
        newPatientLayout.setHorizontalGroup(
            newPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(newPatientLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(createNewPatient1, javax.swing.GroupLayout.DEFAULT_SIZE, 903, Short.MAX_VALUE)
                .addContainerGap())
        );
        newPatientLayout.setVerticalGroup(
            newPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(newPatientLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(createNewPatient1, javax.swing.GroupLayout.DEFAULT_SIZE, 712, Short.MAX_VALUE)
                .addContainerGap())
        );

        mainPanel.add(newPatient, "newPatient");

        javax.swing.GroupLayout newDoctorLayout = new javax.swing.GroupLayout(newDoctor);
        newDoctor.setLayout(newDoctorLayout);
        newDoctorLayout.setHorizontalGroup(
            newDoctorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(newDoctorLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(createNewDoctor2, javax.swing.GroupLayout.DEFAULT_SIZE, 889, Short.MAX_VALUE)
                .addContainerGap())
        );
        newDoctorLayout.setVerticalGroup(
            newDoctorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(newDoctorLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(createNewDoctor2, javax.swing.GroupLayout.DEFAULT_SIZE, 698, Short.MAX_VALUE)
                .addContainerGap())
        );

        mainPanel.add(newDoctor, "newDoctor");

        javax.swing.GroupLayout editPatientLayout = new javax.swing.GroupLayout(editPatient);
        editPatient.setLayout(editPatientLayout);
        editPatientLayout.setHorizontalGroup(
            editPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editPatientLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(editPatient1, javax.swing.GroupLayout.DEFAULT_SIZE, 889, Short.MAX_VALUE)
                .addContainerGap())
        );
        editPatientLayout.setVerticalGroup(
            editPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editPatientLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(editPatient1, javax.swing.GroupLayout.DEFAULT_SIZE, 698, Short.MAX_VALUE)
                .addContainerGap())
        );

        mainPanel.add(editPatient, "editPatient");

        javax.swing.GroupLayout editOfficeLayout = new javax.swing.GroupLayout(editOffice);
        editOffice.setLayout(editOfficeLayout);
        editOfficeLayout.setHorizontalGroup(
            editOfficeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editOfficeLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(reportOfficesPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 859, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(44, Short.MAX_VALUE))
        );
        editOfficeLayout.setVerticalGroup(
            editOfficeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editOfficeLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(reportOfficesPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 641, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(90, Short.MAX_VALUE))
        );

        mainPanel.add(editOffice, "editOffice");

        javax.swing.GroupLayout editDoctorLayout = new javax.swing.GroupLayout(editDoctor);
        editDoctor.setLayout(editDoctorLayout);
        editDoctorLayout.setHorizontalGroup(
            editDoctorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editDoctorLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(editDoctor1, javax.swing.GroupLayout.DEFAULT_SIZE, 889, Short.MAX_VALUE)
                .addContainerGap())
        );
        editDoctorLayout.setVerticalGroup(
            editDoctorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editDoctorLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(editDoctor1, javax.swing.GroupLayout.DEFAULT_SIZE, 698, Short.MAX_VALUE)
                .addContainerGap())
        );

        mainPanel.add(editDoctor, "editDoctor");

        javax.swing.GroupLayout removePatientLayout = new javax.swing.GroupLayout(removePatient);
        removePatient.setLayout(removePatientLayout);
        removePatientLayout.setHorizontalGroup(
            removePatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(removePatientLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(deletePatientOld1, javax.swing.GroupLayout.DEFAULT_SIZE, 903, Short.MAX_VALUE)
                .addContainerGap())
        );
        removePatientLayout.setVerticalGroup(
            removePatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(removePatientLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(deletePatientOld1, javax.swing.GroupLayout.DEFAULT_SIZE, 725, Short.MAX_VALUE)
                .addContainerGap())
        );

        mainPanel.add(removePatient, "removePatient");

        javax.swing.GroupLayout removeOfficeLayout = new javax.swing.GroupLayout(removeOffice);
        removeOffice.setLayout(removeOfficeLayout);
        removeOfficeLayout.setHorizontalGroup(
            removeOfficeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 901, Short.MAX_VALUE)
        );
        removeOfficeLayout.setVerticalGroup(
            removeOfficeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 724, Short.MAX_VALUE)
        );

        mainPanel.add(removeOffice, "removeOffice");

        javax.swing.GroupLayout removeDoctorLayout = new javax.swing.GroupLayout(removeDoctor);
        removeDoctor.setLayout(removeDoctorLayout);
        removeDoctorLayout.setHorizontalGroup(
            removeDoctorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(removeDoctorLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(removeDoctorPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 879, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE))
        );
        removeDoctorLayout.setVerticalGroup(
            removeDoctorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(removeDoctorLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(removeDoctorPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 533, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(165, Short.MAX_VALUE))
        );

        mainPanel.add(removeDoctor, "removeDoctor");

        javax.swing.GroupLayout aboutHospitalLayout = new javax.swing.GroupLayout(aboutHospital);
        aboutHospital.setLayout(aboutHospitalLayout);
        aboutHospitalLayout.setHorizontalGroup(
            aboutHospitalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(aboutHospitalLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(aboutHospital1, javax.swing.GroupLayout.DEFAULT_SIZE, 889, Short.MAX_VALUE)
                .addContainerGap())
        );
        aboutHospitalLayout.setVerticalGroup(
            aboutHospitalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(aboutHospitalLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(aboutHospital1, javax.swing.GroupLayout.DEFAULT_SIZE, 698, Short.MAX_VALUE)
                .addContainerGap())
        );

        mainPanel.add(aboutHospital, "aboutHospital");

        javax.swing.GroupLayout editHospitalLayout = new javax.swing.GroupLayout(editHospital);
        editHospital.setLayout(editHospitalLayout);
        editHospitalLayout.setHorizontalGroup(
            editHospitalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editHospitalLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(editHospital1, javax.swing.GroupLayout.DEFAULT_SIZE, 889, Short.MAX_VALUE)
                .addContainerGap())
        );
        editHospitalLayout.setVerticalGroup(
            editHospitalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editHospitalLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(editHospital1, javax.swing.GroupLayout.DEFAULT_SIZE, 698, Short.MAX_VALUE)
                .addContainerGap())
        );

        mainPanel.add(editHospital, "editHospital");

        javax.swing.GroupLayout reportDoctorLayout = new javax.swing.GroupLayout(reportDoctor);
        reportDoctor.setLayout(reportDoctorLayout);
        reportDoctorLayout.setHorizontalGroup(
            reportDoctorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(reportDoctorLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(reportDoctor1, javax.swing.GroupLayout.PREFERRED_SIZE, 872, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(20, Short.MAX_VALUE))
        );
        reportDoctorLayout.setVerticalGroup(
            reportDoctorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(reportDoctorLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(reportDoctor1, javax.swing.GroupLayout.PREFERRED_SIZE, 567, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(144, Short.MAX_VALUE))
        );

        mainPanel.add(reportDoctor, "reportDoctor");

        javax.swing.GroupLayout reportPatientLayout = new javax.swing.GroupLayout(reportPatient);
        reportPatient.setLayout(reportPatientLayout);
        reportPatientLayout.setHorizontalGroup(
            reportPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(reportPatientLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(reportPatientPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 881, Short.MAX_VALUE)
                .addContainerGap())
        );
        reportPatientLayout.setVerticalGroup(
            reportPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(reportPatientLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(reportPatientPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 552, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(159, Short.MAX_VALUE))
        );

        mainPanel.add(reportPatient, "reportPatient");

        javax.swing.GroupLayout assignRoomLayout = new javax.swing.GroupLayout(assignRoom);
        assignRoom.setLayout(assignRoomLayout);
        assignRoomLayout.setHorizontalGroup(
            assignRoomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(assignRoomLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(createNewRoomPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(219, Short.MAX_VALUE))
        );
        assignRoomLayout.setVerticalGroup(
            assignRoomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(assignRoomLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(createNewRoomPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(398, Short.MAX_VALUE))
        );

        mainPanel.add(assignRoom, "assignRoom");

        javax.swing.GroupLayout reportRoomLayout = new javax.swing.GroupLayout(reportRoom);
        reportRoom.setLayout(reportRoomLayout);
        reportRoomLayout.setHorizontalGroup(
            reportRoomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(reportRoomLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(reportRoomPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 861, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(43, Short.MAX_VALUE))
        );
        reportRoomLayout.setVerticalGroup(
            reportRoomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(reportRoomLayout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(reportRoomPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 571, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(148, Short.MAX_VALUE))
        );

        mainPanel.add(reportRoom, "reportRoom");

        javax.swing.GroupLayout assignDoctorOfficeLayout = new javax.swing.GroupLayout(assignDoctorOffice);
        assignDoctorOffice.setLayout(assignDoctorOfficeLayout);
        assignDoctorOfficeLayout.setHorizontalGroup(
            assignDoctorOfficeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(assignDoctorOfficeLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(asignarConsultorio1, javax.swing.GroupLayout.DEFAULT_SIZE, 915, Short.MAX_VALUE)
                .addContainerGap())
        );
        assignDoctorOfficeLayout.setVerticalGroup(
            assignDoctorOfficeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(assignDoctorOfficeLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(asignarConsultorio1, javax.swing.GroupLayout.DEFAULT_SIZE, 739, Short.MAX_VALUE)
                .addContainerGap())
        );

        mainPanel.add(assignDoctorOffice, "assignDoctorOffice");

        javax.swing.GroupLayout newRoomLayout = new javax.swing.GroupLayout(newRoom);
        newRoom.setLayout(newRoomLayout);
        newRoomLayout.setHorizontalGroup(
            newRoomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(newRoomLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(createNewRoom1, javax.swing.GroupLayout.PREFERRED_SIZE, 816, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(99, Short.MAX_VALUE))
        );
        newRoomLayout.setVerticalGroup(
            newRoomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(newRoomLayout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addComponent(createNewRoom1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(338, Short.MAX_VALUE))
        );

        mainPanel.add(newRoom, "newRoom");

        save.setText("Guardar");
        save.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                saveMouseClicked(evt);
            }
        });
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });
        menuBar.add(save);

        menuHospital.setText("Hospital");

        menuEditHospital.setText("Editar");
        menuEditHospital.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuEditHospitalActionPerformed(evt);
            }
        });
        menuHospital.add(menuEditHospital);

        menuAboutHospital.setText("Acerca De");
        menuAboutHospital.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuAboutHospitalActionPerformed(evt);
            }
        });
        menuHospital.add(menuAboutHospital);

        menuBar.add(menuHospital);

        menuOffice.setText("Consultorio");

        menuNewOffice.setText("Agregar");
        menuNewOffice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuNewOfficeActionPerformed(evt);
            }
        });
        menuOffice.add(menuNewOffice);

        menuAssignOffice.setText("Asignar");
        menuAssignOffice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuAssignOfficeActionPerformed(evt);
            }
        });
        menuOffice.add(menuAssignOffice);

        menuSearchOffice.setText("Buscar");
        menuSearchOffice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuSearchOfficeActionPerformed(evt);
            }
        });
        menuOffice.add(menuSearchOffice);

        menuBar.add(menuOffice);

        menuRoom.setText("HabitaciÃ³n");

        menuAddRoom.setText("Agregar");
        menuAddRoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuAddRoomActionPerformed(evt);
            }
        });
        menuRoom.add(menuAddRoom);

        menuAssignRoom.setText("Asignar");
        menuAssignRoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuAssignRoomActionPerformed(evt);
            }
        });
        menuRoom.add(menuAssignRoom);

        menuSearchRoom.setText("Buscar");
        menuSearchRoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuSearchRoomActionPerformed(evt);
            }
        });
        menuRoom.add(menuSearchRoom);

        menuBar.add(menuRoom);

        menuDoctor.setText("Doctor");

        menuNewDoctor.setText("Agregar");
        menuNewDoctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuNewDoctorActionPerformed(evt);
            }
        });
        menuDoctor.add(menuNewDoctor);

        menuEditDoctor.setText("Editar");
        menuEditDoctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuEditDoctorActionPerformed(evt);
            }
        });
        menuDoctor.add(menuEditDoctor);

        menuRemoveDoctor.setText("Eliminar");
        menuRemoveDoctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuRemoveDoctorActionPerformed(evt);
            }
        });
        menuDoctor.add(menuRemoveDoctor);

        menuBar.add(menuDoctor);

        menuPatient.setText("Paciente");

        menuNewPatient.setText("Agregar");
        menuNewPatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuNewPatientActionPerformed(evt);
            }
        });
        menuPatient.add(menuNewPatient);

        menuEditPatient.setText("Editar");
        menuEditPatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuEditPatientActionPerformed(evt);
            }
        });
        menuPatient.add(menuEditPatient);

        menuRemovePatient.setText("Eliminar");
        menuRemovePatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuRemovePatientActionPerformed(evt);
            }
        });
        menuPatient.add(menuRemovePatient);

        menuBar.add(menuPatient);

        menuReport.setText("Reporte");

        menuReportDoctor.setText("Doctor");
        menuReportDoctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuReportDoctorActionPerformed(evt);
            }
        });
        menuReport.add(menuReportDoctor);

        menuReportPatient.setText("Paciente");
        menuReportPatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuReportPatientActionPerformed(evt);
            }
        });
        menuReport.add(menuReportPatient);

        menuBar.add(menuReport);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //BotÃ³n de menÃº Agregar Consultorio
    private void menuNewOfficeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuNewOfficeActionPerformed
        if (this.hospital != null) {
            this.createNewDoctorsOffice1.setHospital(hospital);
            CardLayout card = (CardLayout) mainPanel.getLayout();
            card.show(mainPanel, "newOffice");
        } else {
            JOptionPane.showMessageDialog(null, "Por favor, cree un doctor primero.", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_menuNewOfficeActionPerformed
    //BotÃ³n menÃº Editar Consultorio
    private void menuSearchOfficeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuSearchOfficeActionPerformed
        if (this.hospital != null) {
            CardLayout card = (CardLayout) mainPanel.getLayout();
            card.show(mainPanel, "editOffice");
            this.reportOfficesPanel.delete();
            this.reportOfficesPanel.setData(this.hospital);
        } else {
            JOptionPane.showMessageDialog(null, "Por favor, cree un hospital primero.", "ERROR", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_menuSearchOfficeActionPerformed
    //BotÃ³n menÃº Agregar Doctor
    private void menuNewDoctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuNewDoctorActionPerformed
        if (this.hospital != null) {
            CardLayout card = (CardLayout) mainPanel.getLayout();
            card.show(mainPanel, "newDoctor");
        } else {
            JOptionPane.showMessageDialog(null, "Por favor, cree un hospital primero.", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_menuNewDoctorActionPerformed
    //BotÃ³n menÃº Editar Doctor
    private void menuEditDoctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuEditDoctorActionPerformed
        if (this.hospital != null) {
            if (this.hospital.getDoctors().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Por favor, cree un doctor primero.", "ERROR", JOptionPane.ERROR_MESSAGE);
                this.menuNewDoctor.doClick();
            } else {
                this.editDoctor1.setHospital(hospital);
                CardLayout card = (CardLayout) mainPanel.getLayout();
                card.show(mainPanel, "editDoctor");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Por favor, cree un hospital primero.", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_menuEditDoctorActionPerformed
    //BotÃ³n menÃº Eliminar Doctor
    private void menuRemoveDoctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuRemoveDoctorActionPerformed
        if (this.hospital != null) {
            if (this.hospital.getDoctors().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Por favor, cree un doctor primero.", "ERROR", JOptionPane.ERROR_MESSAGE);
                this.menuNewDoctor.doClick();
            } else {
                this.removeDoctorPanel.setHospital(hospital);
                CardLayout card = (CardLayout) mainPanel.getLayout();
                card.show(mainPanel, "removeDoctor");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Por favor, cree un hospital primero.", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_menuRemoveDoctorActionPerformed
    //BotÃ³n menÃº Agregar Paciente
    private void menuNewPatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuNewPatientActionPerformed
        if (this.hospital != null) {
            this.createNewPatient1.setHospital(hospital);
            CardLayout card = (CardLayout) mainPanel.getLayout();
            card.show(mainPanel, "newPatient");
        } else {
            JOptionPane.showMessageDialog(null, "Por favor, cree un hospital primero.", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_menuNewPatientActionPerformed
    //BotÃ³n menÃº Editar Paciente
    private void menuEditPatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuEditPatientActionPerformed
        if (this.hospital != null) {
            if (!this.hospital.getPatients().isEmpty()) {
                this.editPatient1.setHospital(hospital);
                CardLayout card = (CardLayout) mainPanel.getLayout();
                card.show(mainPanel, "editPatient");
            } else {
                JOptionPane.showMessageDialog(null, "Por favor, cree un paciente primero.", "ERROR", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Por favor, cree un hospital primero.", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_menuEditPatientActionPerformed
    //BotÃ³n menÃº Eliminar Paciente
    private void menuRemovePatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuRemovePatientActionPerformed
        this.switchToRemovePatientPanel();
    }//GEN-LAST:event_menuRemovePatientActionPerformed
    //BotÃ³n menÃº Reportar Doctor
    private void menuReportDoctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuReportDoctorActionPerformed
        if (this.hospital != null) {
            this.reportDoctor1.delete();
            this.reportDoctor1.setData(this.hospital.getDoctors());
            CardLayout card = (CardLayout) mainPanel.getLayout();
            card.show(mainPanel, "reportDoctor");

        } else {
            JOptionPane.showMessageDialog(null, "Por favor, cree un hospital primero.", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_menuReportDoctorActionPerformed
    //BotÃ³n menÃº Acerca De
    private void menuAboutHospitalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAboutHospitalActionPerformed
        switchToInitPanel();
    }//GEN-LAST:event_menuAboutHospitalActionPerformed
    //BotÃ³n menÃº Editar Hospital
    private void menuEditHospitalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuEditHospitalActionPerformed
        if (this.hospital != null) {
            CardLayout card = (CardLayout) mainPanel.getLayout();
            card.show(mainPanel, "editHospital");
            this.editHospital1.setFields(this.hospital);
        } else {
            JOptionPane.showMessageDialog(null, "Por favor, cree un hospital primero.", "ERROR", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_menuEditHospitalActionPerformed
    //Click botÃ³n menÃº guardar
    private void saveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveMouseClicked
        // TODO add your handling code here:

        GuardarHospital GDB = new GuardarHospital(this.hospital);
        JOptionPane.showMessageDialog(null, "Los datos se han guardado exitosamente", "DATOS GUARDADOS", JOptionPane.INFORMATION_MESSAGE);

    }//GEN-LAST:event_saveMouseClicked
    //Enter botÃ³n menÃº guardar
    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        // TODO add your handling code here:
        GuardarHospital GDB = new GuardarHospital(this.hospital);
        JOptionPane.showMessageDialog(null, "Los datos se han guardado exitosamente", "DATOS GUARDADOS", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_saveActionPerformed
    //BotÃ³n menÃº Reportar Paciente
    private void menuReportPatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuReportPatientActionPerformed
        // TODO add your handling code here:
        if (this.hospital != null) {
            if (!this.hospital.getPatients().isEmpty()) {
                CardLayout card = (CardLayout) mainPanel.getLayout();
                card.show(mainPanel, "reportPatient");
                this.reportPatientPanel.delete();
                this.reportPatientPanel.setData(this.hospital.getPatients());
            } else {
                JOptionPane.showMessageDialog(null, "Por favor, cree un paciente primero.", "ERROR", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Por favor, cree un hospital primero.", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_menuReportPatientActionPerformed

    private void menuAssignRoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAssignRoomActionPerformed
        // TODO add your handling code here:
        if (this.hospital != null) {
            if (!this.hospital.getRooms().isEmpty()) {
                CardLayout card = (CardLayout) mainPanel.getLayout();
                card.show(mainPanel, "assignRoom");
                this.createNewRoomPanel.setHospital(this.hospital);
            } else {
                JOptionPane.showMessageDialog(null, "Por favor, cree una habitaciÃ³n primero.", "ERROR", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Por favor, cree un hospital primero.", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_menuAssignRoomActionPerformed

    private void menuSearchRoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuSearchRoomActionPerformed
        // TODO add your handling code here:
        if (this.hospital != null) {
            if (!this.hospital.getRooms().isEmpty()) {
                CardLayout card = (CardLayout) mainPanel.getLayout();
                card.show(mainPanel, "reportRoom");
                this.reportRoomPanel.delete();
                this.reportRoomPanel.setData(this.hospital);
            } else {
                JOptionPane.showMessageDialog(null, "Por favor, cree una habitaciÃ³n primero.", "ERROR", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Por favor, cree un hospital primero.", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_menuSearchRoomActionPerformed

    private void menuAssignOfficeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAssignOfficeActionPerformed
        // TODO add your handling code here:
        if (this.hospital != null) {
            if (!this.hospital.getOffices().isEmpty()) {
                CardLayout card = (CardLayout) mainPanel.getLayout();
                card.show(mainPanel, "assignDoctorOffice");
                this.asignarConsultorio1.setHospital(this.hospital);
            } else {
                JOptionPane.showMessageDialog(null, "Por favor, cree una habitaciÃ³n primero.", "ERROR", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Por favor, cree un hospital primero.", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_menuAssignOfficeActionPerformed

    private void menuAddRoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAddRoomActionPerformed
        // TODO add your handling code here:
        if (this.hospital != null) {
            CardLayout card = (CardLayout) mainPanel.getLayout();
            card.show(mainPanel, "newRoom");
            this.createNewRoom1.setFields(this.hospital.getRooms().size()+1);

        } else {
            JOptionPane.showMessageDialog(null, "Por favor, cree un hospital primero.", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_menuAddRoomActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }

    private JFrame Frame = new JFrame();
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel aboutHospital;
    private Interfaz.Paneles.aboutHospital aboutHospital1;
    private Interfaz.Paneles.AsignarConsultorio asignarConsultorio1;
    private javax.swing.JPanel assignDoctorOffice;
    private javax.swing.JPanel assignRoom;
    private Interfaz.Paneles.CreateNewDoctor createNewDoctor2;
    private Interfaz.Paneles.CreateNewDoctorsOffice createNewDoctorsOffice1;
    private Interfaz.Paneles.CreateNewHospital createNewHospitalForm;
    private Interfaz.Paneles.CreateNewPatient createNewPatient1;
    private Interfaz.Paneles.CreateNewRoom createNewRoom1;
    private Interfaz.Paneles.AsignarHabitacion createNewRoomPanel;
    private Interfaz.Paneles.DeletePatientOld deletePatientOld1;
    private javax.swing.JPanel editDoctor;
    private Interfaz.Paneles.EditDoctor editDoctor1;
    private javax.swing.JPanel editHospital;
    private Interfaz.Paneles.EditHospital editHospital1;
    private javax.swing.JPanel editOffice;
    private javax.swing.JPanel editPatient;
    private Interfaz.Paneles.EditPatient editPatient1;
    private javax.swing.JPanel inicioPanel;
    private Interfaz.Paneles.InicioPanel inicioPanel1;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuItem menuAboutHospital;
    private javax.swing.JMenuItem menuAddRoom;
    private javax.swing.JMenuItem menuAssignOffice;
    private javax.swing.JMenuItem menuAssignRoom;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu menuDoctor;
    private javax.swing.JMenuItem menuEditDoctor;
    private javax.swing.JMenuItem menuEditHospital;
    private javax.swing.JMenuItem menuEditPatient;
    private javax.swing.JMenu menuHospital;
    private javax.swing.JMenuItem menuNewDoctor;
    private javax.swing.JMenuItem menuNewOffice;
    private javax.swing.JMenuItem menuNewPatient;
    private javax.swing.JMenu menuOffice;
    private javax.swing.JMenu menuPatient;
    private javax.swing.JMenuItem menuRemoveDoctor;
    private javax.swing.JMenuItem menuRemovePatient;
    private javax.swing.JMenu menuReport;
    private javax.swing.JMenuItem menuReportDoctor;
    private javax.swing.JMenuItem menuReportPatient;
    private javax.swing.JMenu menuRoom;
    private javax.swing.JMenuItem menuSearchOffice;
    private javax.swing.JMenuItem menuSearchRoom;
    private javax.swing.JPanel newDoctor;
    private javax.swing.JPanel newHospital;
    private javax.swing.JPanel newOffice;
    private javax.swing.JPanel newPatient;
    private javax.swing.JPanel newRoom;
    private javax.swing.JPanel removeDoctor;
    private Interfaz.Paneles.DeleteDoctor removeDoctorPanel;
    private javax.swing.JPanel removeOffice;
    private javax.swing.JPanel removePatient;
    private javax.swing.JPanel reportDoctor;
    private Interfaz.Paneles.ReportDoctor reportDoctor1;
    private Interfaz.Paneles.ReportOffices reportOfficesPanel;
    private javax.swing.JPanel reportPatient;
    private Interfaz.Paneles.ReportPatient reportPatientPanel;
    private javax.swing.JPanel reportRoom;
    private Interfaz.Paneles.ReportRoom reportRoomPanel;
    private javax.swing.JMenu save;
    // End of variables declaration//GEN-END:variables

    private void initSaveButtonsListeners() {
        //Crear Nuevo Hospital

        this.reportOfficesPanel.getTable().getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent event) {
                if (!event.getValueIsAdjusting()) {

                    int selectedrow = reportDoctor1.getTable().getSelectedRow();
                    if (selectedrow != -1) {
                        String i = reportDoctor1.getTable().getValueAt(selectedrow, 0).toString();
                        changeDoctorsOffice(i);
                    }

                }

            }
        });
        this.createNewHospitalForm.getSaveButton().addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveNewHospitalAction(evt);
            }
        });
        //Reportar Doctor
        this.reportDoctor1.getTable().getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent event) {
                if (!event.getValueIsAdjusting()) {

                    int selectedrow = reportDoctor1.getTable().getSelectedRow();
                    if (selectedrow != -1) {
                        String i = reportDoctor1.getTable().getValueAt(selectedrow, 8).toString();
                        modifyDoctor(i);
                    }

                }

            }
        });
        //Reportar Paciente
        this.reportPatientPanel.getTable().getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent event) {
                if (!event.getValueIsAdjusting()) {
                    modifyPatient(reportPatientPanel.getTable().getValueAt(reportPatientPanel.getTable().getSelectedRow(), 3).toString());
                }

            }
        });
        //Reportar Consultorio
        this.reportOfficesPanel.getTable().getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent event) {
                if (!event.getValueIsAdjusting()) {
                    modifyOffice(reportOfficesPanel.getTable().getValueAt(reportOfficesPanel.getTable().getSelectedRow(), 3).toString());
                }

            }
        });
        //Editar Hospital
        this.editHospital1.getSaveButton().addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveEditHospitalAction(evt);
            }
        });
        //Crear Doctor
        this.createNewDoctor2.getSaveButton().addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveNewDoctorAction(evt);
            }
        });
        //Editar Doctor
        this.editDoctor1.getSaveButton().addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveEditDoctorAction(evt);
            }
        });
        //Eliminar Doctor
        this.removeDoctorPanel.getDeleteButton().addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveDeleteDoctorAction(evt);
            }
        });

        //Crear Paciente
        this.createNewPatient1.getSaveButton().addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveNewPatientAction(evt);
            }
        });

        this.editPatient1.getSaveButton().addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveEditPatientAction(evt);
            }
        });

        this.deletePatientOld1.getSaveButton().addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveDeletePatientAction(evt);
            }
        });

        //Crear Consultorio
        this.createNewDoctorsOffice1.getSaveButton().addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveNewOfficeAction(evt);
            }
        });

        //Asignar habitaciÃ³n a paciente
        this.createNewRoomPanel.getAssignButton().addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAssignRoom(evt);
            }
        });

        //Crear nueva habitaciÃ³n
        this.createNewRoom1.getCreateButton().addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    saveNewRoom(evt);

                } catch (NotValidNumber ex) {
                    Logger.getLogger(MainWindow.class
                            .getName()).log(Level.SEVERE, null, ex);
                }
            }
        });

    }

    public void changeDoctorsOffice(String ID) {
        /*
        int idFounded = -1;
        
        ArrayList<DoctorsOffice> offices = this.hospital.getOffices();
        
        for(int i=0; i< offices.size();i++){
            if(ID.equals(offices.get(i).getId())){
                idFounded = i;
                i = offices.size(); 
            }
        }
        
        if (idFounded >= 0){
  
            
            Consultorio doctor = new Consultorio();
            
            doctor.setFields(doctors.get(idFounded).getFirstName() , doctors.get(idFounded).getLastName(), doctors.get(idFounded).getLicence(), doctors.get(idFounded).getTelephone(), doctors.get(idFounded).getAddress(), doctors.get(idFounded).getEmail(), Integer.toString(doctors.get(idFounded).getAge()), doctors.get(idFounded).getDepartment(), doctors.get(idFounded).getId());
            
            doctor.setVisible(true);
            
            FrameWithCloseButton f = new FrameWithCloseButton();
                    
            f.setSize(500, 600);
            f.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            f.setVisible(true);
 
            f.setContent(doctor);
            
            doctor.getSaveButton().addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    Doctor p = doctor.getDoctor();
                
                    changeed(p);
                }
            });
        }
        
        CardLayout card = (CardLayout) mainPanel.getLayout();
        card.show(mainPanel, "inicioPanel");
         */
    }

    public void modifyDoctor(String ID) {
        int idFounded = -1;

        ArrayList<Doctor> docts = this.hospital.getDoctors();

        for (int i = 0; i < docts.size(); i++) {
            if (ID.equals(docts.get(i).getId())) {
                idFounded = i;
                i = docts.size();
            }
        }

        if (idFounded >= 0) {
            ShowDoctor doctor = new ShowDoctor();
            ArrayList<String> IDPatients = this.hospital.getDoctors().get(idFounded).getPatientID();
            DefaultListModel<String> model = new DefaultListModel<>();

            if (IDPatients != null) {
                if (!IDPatients.isEmpty()) {
                    for (int x = 0; x < IDPatients.size(); x++) {
                        model.addElement(IDPatients.get(x));
                    }
                } else {
                    model.addElement("NingÃºn paciente es atendido por este doctor.");
                }

            } else {
                model.addElement("NingÃºn paciente es atendido por este doctor.");
            }

            doctor.setFields(docts.get(idFounded).getFirstName(), docts.get(idFounded).getLastName(), docts.get(idFounded).getLicence(), docts.get(idFounded).getTelephone(), docts.get(idFounded).getAddress(), docts.get(idFounded).getEmail(), Integer.toString(docts.get(idFounded).getAge()), docts.get(idFounded).getDepartment(), docts.get(idFounded).getId(), model);

            doctor.setVisible(true);

            FrameWithCloseButton f = new FrameWithCloseButton();

            f.setSize(500, 600);
            f.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            f.setVisible(true);

            f.setContent(doctor);

            doctor.getSaveButton().addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    Doctor p = doctor.getDoctor();

                    changeed(p);

                }
            });
        }

        CardLayout card = (CardLayout) mainPanel.getLayout();
        card.show(mainPanel, "inicioPanel");

    }

    private void changeed(Doctor newInfo) {
        int index = -1;

        for (int x = 0; x < this.hospital.getDoctors().size(); x++) {
            if (this.hospital.getDoctors().get(x).getId().equals(newInfo.getId())) {
                index = x;
            }
        }
        if (index != -1) {

            Doctor old = this.hospital.getDoctors().get(index);

            old.setAddress(newInfo.getAddress());

            old.setFirstName(newInfo.getFirstName());

            old.setLastName(newInfo.getLastName());

            old.setAge(newInfo.getAge());

            old.setDepartment(newInfo.getDepartment());

            old.setEmail(newInfo.getEmail());

            old.setLicence(newInfo.getLicence());

            old.setTelephone(newInfo.getTelephone());

        }
    }

    public void modifyPatient(String nSS) {
        this.hospital.showPatientInfo(nSS);
    }

    public void modifyOffice(String ID) {
        this.hospital.showDoctorsOfficeInfo(ID);
    }

    public void saveNewHospitalAction(java.awt.event.ActionEvent evt) {

        this.createNewHospitalForm.save();

        this.hospital = null;

        if (this.createNewHospitalForm.getHospital() != null) {

            this.hospital = new Hospital();
            this.hospital.setName(this.createNewHospitalForm.getHospital().getName());
            this.hospital.setAddress(this.createNewHospitalForm.getHospital().getAddress());
            try {
                this.hospital.setTelephone(this.createNewHospitalForm.getHospital().getTelephone());
            } catch (NotValidNumber ex) {
                //TODO
            }

            try {
                this.hospital.setNumOfRooms(this.createNewHospitalForm.getHospital().getNumOfRooms());
            } catch (NotValidNumber ex) {
                //TODO
            }

            try {
                this.hospital.setNumOfDoctorsOffices(this.createNewHospitalForm.getHospital().getNumOfDoctorsOffices());
            } catch (NotValidNumber ex) {
                //TODO
            }

            this.hospital.fillRoomsAndOffice();
            GuardarHospital GDB = new GuardarHospital(this.hospital);

            this.Frame.setVisible(false);

            this.setVisible(true);

            this.createNewHospitalForm.clearFields();
            this.menuAboutHospital.doClick();
        }
    }

    public void saveEditHospitalAction(java.awt.event.ActionEvent evt) {
        this.editHospital1.save();

        this.hospital = null;

        if (this.editHospital1.getHospital() != null) {

            this.hospital = new Hospital();
            this.hospital.setName(this.editHospital1.getHospital().getName());
            this.hospital.setAddress(this.editHospital1.getHospital().getAddress());
            try {
                this.hospital.setTelephone(this.editHospital1.getHospital().getTelephone());
            } catch (NotValidNumber ex) {
                //TODO
            }

            try {
                this.hospital.setNumOfRooms(this.editHospital1.getHospital().getNumOfRooms());
            } catch (NotValidNumber ex) {
                //TODO
            }

            try {
                this.hospital.setNumOfDoctorsOffices(this.editHospital1.getHospital().getNumOfDoctorsOffices());
            } catch (NotValidNumber ex) {
                //TODO
            }

            GuardarHospital GDB = new GuardarHospital(this.hospital);

            this.menuAboutHospital.doClick();
        }
    }

    public void saveNewDoctorAction(java.awt.event.ActionEvent evt) {
        Doctor d = this.createNewDoctor2.getDoctor();
        this.hospital.addDoctor(d);
        JOptionPane.showMessageDialog(null, "Doctor created successfully", "INFORMATION", JOptionPane.INFORMATION_MESSAGE);
        this.createNewDoctor2.clearFields();
    }

    public void saveEditDoctorAction(java.awt.event.ActionEvent evt) {
        Doctor oldDoctor = null;
        Doctor newDoctor = this.editDoctor1.getDoctor();
        for (int i = 0; i < this.hospital.getDoctors().size(); i++) {
            if (this.hospital.getDoctors().get(i).getId().equals(newDoctor.getId())) {
                oldDoctor = this.hospital.getDoctors().get(i);
            }
        }

        if (oldDoctor != null) {
            oldDoctor.setFirstName(newDoctor.getFirstName());
            oldDoctor.setLastName(newDoctor.getLastName());
            oldDoctor.setAddress(newDoctor.getAddress());
            oldDoctor.setEmail(newDoctor.getEmail());
            oldDoctor.setTelephone(newDoctor.getTelephone());
            oldDoctor.setAge(newDoctor.getAge());
            oldDoctor.setDepartment(newDoctor.getDepartment());
            oldDoctor.setLicence(newDoctor.getLicence());
            JOptionPane.showMessageDialog(null, "Doctor editado satisfactoriamente", "INFORMATION", JOptionPane.INFORMATION_MESSAGE);
            this.menuEditDoctor.doClick();
        } else {
            System.out.println("Error editando al doctor: El doctor no ha sido encontrado en el hospital.");
        }
    }

    public void saveDeleteDoctorAction(java.awt.event.ActionEvent evt) {
        Doctor eliminatedDoctor = this.removeDoctorPanel.getDoctor();
        for (int i = 0; i < this.hospital.getDoctors().size(); i++) {
            if (this.hospital.getDoctors().get(i).getId().equals(eliminatedDoctor.getId())) {
                this.hospital.getDoctors().remove(i);
                JOptionPane.showMessageDialog(null, "Doctor eliminado satisfactoriamente", "INFORMATION", JOptionPane.INFORMATION_MESSAGE);
                removeDoctorPanel.clearFields();
            }
        }
    }

    public void saveNewPatientAction(java.awt.event.ActionEvent evt) {
        Patient p = this.createNewPatient1.getPatient();
        this.hospital.addPatient(p);
        for (int i = 0; i < this.createNewPatient1.getDoctorIDs().size(); i++) {
            this.hospital.assignDoctorToPatient(this.createNewPatient1.getDoctorIDs().get(i), this.createNewPatient1.getNSS());
        }

        JOptionPane.showMessageDialog(null, "Paciente creado satisfactoriamente", "INFORMATION", JOptionPane.INFORMATION_MESSAGE);
        this.createNewPatient1.clearFields();
    }

    public void saveEditPatientAction(java.awt.event.ActionEvent evt) {
        Patient oldPatient = this.editPatient1.getOldPatient();
        Patient newPatient = this.editPatient1.getPatient();
        oldPatient.setFirstName(newPatient.getFirstName());
        oldPatient.setLastName(newPatient.getLastName());
        oldPatient.setAge(newPatient.getAge());
        oldPatient.setAddress(newPatient.getAddress());
        oldPatient.setTelephone(newPatient.getTelephone());
        oldPatient.setEmail(newPatient.getEmail());
        try {
            oldPatient.setSecurityNumber(newPatient.getSecurityNumber());

        } catch (NotValidNumber ex) {
            Logger.getLogger(MainWindow.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
        try {
            oldPatient.setWeigth(newPatient.getWeigth());

        } catch (NotValidNumber ex) {
            Logger.getLogger(MainWindow.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
        try {
            oldPatient.setSize(newPatient.getSize());

        } catch (NotValidNumber ex) {
            Logger.getLogger(MainWindow.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
        oldPatient.setDisease(newPatient.getDisease());
        try {
            oldPatient.setRoomID(newPatient.getRoomID());

        } catch (NotValidNumber ex) {
            Logger.getLogger(MainWindow.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
        for (int i = 0; i < newPatient.getDoctorID().size(); i++) {
            try {
                oldPatient.setDoctorID(newPatient.getDoctorID().get(i));

            } catch (NotValidNumber ex) {
                Logger.getLogger(MainWindow.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
        }
        oldPatient.setStatus(newPatient.getStatus());
        try {
            this.hospital.getRooms().get(Integer.valueOf(this.hospital.findPatientBySecurityNumber(newPatient.getSecurityNumber()))).setPatientID(newPatient.getSecurityNumber());

        } catch (NotValidNumber ex) {
            Logger.getLogger(MainWindow.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

    }

    public void saveDeletePatientAction(java.awt.event.ActionEvent evt) {
        int eliminatedPatientIndex = this.deletePatientOld1.getDeletedPatientIndex();
        this.hospital.getPatients().remove(eliminatedPatientIndex);
        JOptionPane.showMessageDialog(null, "Paciente eliminado satisfactoriamente", "INFORMATION", JOptionPane.INFORMATION_MESSAGE);
        this.deletePatientOld1.clearFields();
        this.switchToRemovePatientPanel();
    }

    public void saveNewOfficeAction(java.awt.event.ActionEvent evt) {
        DoctorsOffice dof = this.createNewDoctorsOffice1.getOffice();
        this.hospital.addDoctorOffice(dof);
        JOptionPane.showMessageDialog(null, "Consultorio creado satisfactoriamente", "INFORMATION", JOptionPane.INFORMATION_MESSAGE);
        this.createNewDoctorsOffice1.clearFields();
    }

    public void saveEditOfficeAction(java.awt.event.ActionEvent evt) {
    }

    private void switchToRemovePatientPanel() {
        if (this.hospital != null) {
            if (!this.hospital.getPatients().isEmpty()) {
                this.deletePatientOld1.setHospital(hospital);
                CardLayout card = (CardLayout) mainPanel.getLayout();
                card.show(mainPanel, "removePatient");
            } else {
                switchToInitPanel();
                JOptionPane.showMessageDialog(null, "No se queda ningÃºn paciente en el hospital.", "ERROR", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            switchToInitPanel();
            JOptionPane.showMessageDialog(null, "Por favor, cree un hospital primero.", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void switchToInitPanel() {
        if (this.hospital != null) {
            this.aboutHospital1.setHospital(hospital);

            CardLayout card = (CardLayout) mainPanel.getLayout();
            card.show(mainPanel, "aboutHospital");
        } else {
            JOptionPane.showMessageDialog(null, "Por favor, cree un hosÃ­tal primero.", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    public void saveAssignRoom(java.awt.event.ActionEvent evt) {
        String rom = this.createNewRoomPanel.getSelectedRoom();
        String pat = this.createNewRoomPanel.getSelectedPatient();
        this.hospital.assignRoomToPatient(pat, rom);
        JOptionPane.showMessageDialog(null, "AsignaciÃ³n Satisfactoria", "INFORMATION", JOptionPane.INFORMATION_MESSAGE);
    }

    public void saveNewRoom(java.awt.event.ActionEvent evt) throws NotValidNumber {

        if (this.createNewRoom1.getPatientID().isEmpty()) {
            this.hospital.addRoom();
        } else {
            this.hospital.addRoom(this.createNewRoom1.getPatientID());
            this.hospital.assignRoomToPatient(this.createNewRoom1.getPatientID(), this.createNewRoom1.getRoomID());
        }
        JOptionPane.showMessageDialog(null,"HabitaciÃ³n creada","OPERACION EXITOSA", JOptionPane.INFORMATION_MESSAGE);
    }

}
